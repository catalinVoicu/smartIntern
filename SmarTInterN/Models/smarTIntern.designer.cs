#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.225
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SmarTInterN.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="smarTinternDataBase")]
	public partial class smarTInternDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertApplicationTable(ApplicationTable instance);
    partial void UpdateApplicationTable(ApplicationTable instance);
    partial void DeleteApplicationTable(ApplicationTable instance);
    partial void Insertaspnet_Membership(aspnet_Membership instance);
    partial void Updateaspnet_Membership(aspnet_Membership instance);
    partial void Deleteaspnet_Membership(aspnet_Membership instance);
    partial void InsertDescription(Description instance);
    partial void UpdateDescription(Description instance);
    partial void DeleteDescription(Description instance);
    partial void InsertPicture(Picture instance);
    partial void UpdatePicture(Picture instance);
    partial void DeletePicture(Picture instance);
    partial void InsertStudentTable(StudentTable instance);
    partial void UpdateStudentTable(StudentTable instance);
    partial void DeleteStudentTable(StudentTable instance);
    partial void InsertTeamTable(TeamTable instance);
    partial void UpdateTeamTable(TeamTable instance);
    partial void DeleteTeamTable(TeamTable instance);
    #endregion
		
		public smarTInternDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["smarTinternDataBaseConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public smarTInternDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public smarTInternDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public smarTInternDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public smarTInternDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<ApplicationTable> ApplicationTables
		{
			get
			{
				return this.GetTable<ApplicationTable>();
			}
		}
		
		public System.Data.Linq.Table<aspnet_Membership> aspnet_Memberships
		{
			get
			{
				return this.GetTable<aspnet_Membership>();
			}
		}
		
		public System.Data.Linq.Table<Description> Descriptions
		{
			get
			{
				return this.GetTable<Description>();
			}
		}
		
		public System.Data.Linq.Table<Picture> Pictures
		{
			get
			{
				return this.GetTable<Picture>();
			}
		}
		
		public System.Data.Linq.Table<StudentTable> StudentTables
		{
			get
			{
				return this.GetTable<StudentTable>();
			}
		}
		
		public System.Data.Linq.Table<TeamTable> TeamTables
		{
			get
			{
				return this.GetTable<TeamTable>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ApplicationTable")]
	public partial class ApplicationTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _App_Id;
		
		private string _AppName;
		
		private System.Nullable<System.Guid> _Description_Id;
		
		private EntitySet<Picture> _Pictures;
		
		private EntitySet<TeamTable> _TeamTables;
		
		private EntityRef<Description> _Description;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApp_IdChanging(System.Guid value);
    partial void OnApp_IdChanged();
    partial void OnAppNameChanging(string value);
    partial void OnAppNameChanged();
    partial void OnDescription_IdChanging(System.Nullable<System.Guid> value);
    partial void OnDescription_IdChanged();
    #endregion
		
		public ApplicationTable()
		{
			this._Pictures = new EntitySet<Picture>(new Action<Picture>(this.attach_Pictures), new Action<Picture>(this.detach_Pictures));
			this._TeamTables = new EntitySet<TeamTable>(new Action<TeamTable>(this.attach_TeamTables), new Action<TeamTable>(this.detach_TeamTables));
			this._Description = default(EntityRef<Description>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_App_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid App_Id
		{
			get
			{
				return this._App_Id;
			}
			set
			{
				if ((this._App_Id != value))
				{
					this.OnApp_IdChanging(value);
					this.SendPropertyChanging();
					this._App_Id = value;
					this.SendPropertyChanged("App_Id");
					this.OnApp_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AppName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string AppName
		{
			get
			{
				return this._AppName;
			}
			set
			{
				if ((this._AppName != value))
				{
					this.OnAppNameChanging(value);
					this.SendPropertyChanging();
					this._AppName = value;
					this.SendPropertyChanged("AppName");
					this.OnAppNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description_Id", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> Description_Id
		{
			get
			{
				return this._Description_Id;
			}
			set
			{
				if ((this._Description_Id != value))
				{
					if (this._Description.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDescription_IdChanging(value);
					this.SendPropertyChanging();
					this._Description_Id = value;
					this.SendPropertyChanged("Description_Id");
					this.OnDescription_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ApplicationTable_Picture", Storage="_Pictures", ThisKey="App_Id", OtherKey="App_Id")]
		public EntitySet<Picture> Pictures
		{
			get
			{
				return this._Pictures;
			}
			set
			{
				this._Pictures.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ApplicationTable_TeamTable", Storage="_TeamTables", ThisKey="App_Id", OtherKey="App_Id")]
		public EntitySet<TeamTable> TeamTables
		{
			get
			{
				return this._TeamTables;
			}
			set
			{
				this._TeamTables.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Description_ApplicationTable", Storage="_Description", ThisKey="Description_Id", OtherKey="DescriptionId", IsForeignKey=true)]
		public Description Description
		{
			get
			{
				return this._Description.Entity;
			}
			set
			{
				Description previousValue = this._Description.Entity;
				if (((previousValue != value) 
							|| (this._Description.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Description.Entity = null;
						previousValue.ApplicationTables.Remove(this);
					}
					this._Description.Entity = value;
					if ((value != null))
					{
						value.ApplicationTables.Add(this);
						this._Description_Id = value.DescriptionId;
					}
					else
					{
						this._Description_Id = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Description");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Pictures(Picture entity)
		{
			this.SendPropertyChanging();
			entity.ApplicationTable = this;
		}
		
		private void detach_Pictures(Picture entity)
		{
			this.SendPropertyChanging();
			entity.ApplicationTable = null;
		}
		
		private void attach_TeamTables(TeamTable entity)
		{
			this.SendPropertyChanging();
			entity.ApplicationTable = this;
		}
		
		private void detach_TeamTables(TeamTable entity)
		{
			this.SendPropertyChanging();
			entity.ApplicationTable = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.aspnet_Membership")]
	public partial class aspnet_Membership : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ApplicationId;
		
		private System.Guid _UserId;
		
		private string _Password;
		
		private int _PasswordFormat;
		
		private string _PasswordSalt;
		
		private string _MobilePIN;
		
		private string _Email;
		
		private string _LoweredEmail;
		
		private string _PasswordQuestion;
		
		private string _PasswordAnswer;
		
		private bool _IsApproved;
		
		private bool _IsLockedOut;
		
		private System.DateTime _CreateDate;
		
		private System.DateTime _LastLoginDate;
		
		private System.DateTime _LastPasswordChangedDate;
		
		private System.DateTime _LastLockoutDate;
		
		private int _FailedPasswordAttemptCount;
		
		private System.DateTime _FailedPasswordAttemptWindowStart;
		
		private int _FailedPasswordAnswerAttemptCount;
		
		private System.DateTime _FailedPasswordAnswerAttemptWindowStart;
		
		private string _Comment;
		
		private EntityRef<TeamTable> _TeamTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApplicationIdChanging(System.Guid value);
    partial void OnApplicationIdChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnPasswordFormatChanging(int value);
    partial void OnPasswordFormatChanged();
    partial void OnPasswordSaltChanging(string value);
    partial void OnPasswordSaltChanged();
    partial void OnMobilePINChanging(string value);
    partial void OnMobilePINChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnLoweredEmailChanging(string value);
    partial void OnLoweredEmailChanged();
    partial void OnPasswordQuestionChanging(string value);
    partial void OnPasswordQuestionChanged();
    partial void OnPasswordAnswerChanging(string value);
    partial void OnPasswordAnswerChanged();
    partial void OnIsApprovedChanging(bool value);
    partial void OnIsApprovedChanged();
    partial void OnIsLockedOutChanging(bool value);
    partial void OnIsLockedOutChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    partial void OnLastLoginDateChanging(System.DateTime value);
    partial void OnLastLoginDateChanged();
    partial void OnLastPasswordChangedDateChanging(System.DateTime value);
    partial void OnLastPasswordChangedDateChanged();
    partial void OnLastLockoutDateChanging(System.DateTime value);
    partial void OnLastLockoutDateChanged();
    partial void OnFailedPasswordAttemptCountChanging(int value);
    partial void OnFailedPasswordAttemptCountChanged();
    partial void OnFailedPasswordAttemptWindowStartChanging(System.DateTime value);
    partial void OnFailedPasswordAttemptWindowStartChanged();
    partial void OnFailedPasswordAnswerAttemptCountChanging(int value);
    partial void OnFailedPasswordAnswerAttemptCountChanged();
    partial void OnFailedPasswordAnswerAttemptWindowStartChanging(System.DateTime value);
    partial void OnFailedPasswordAnswerAttemptWindowStartChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    #endregion
		
		public aspnet_Membership()
		{
			this._TeamTable = default(EntityRef<TeamTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ApplicationId
		{
			get
			{
				return this._ApplicationId;
			}
			set
			{
				if ((this._ApplicationId != value))
				{
					this.OnApplicationIdChanging(value);
					this.SendPropertyChanging();
					this._ApplicationId = value;
					this.SendPropertyChanged("ApplicationId");
					this.OnApplicationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordFormat", DbType="Int NOT NULL")]
		public int PasswordFormat
		{
			get
			{
				return this._PasswordFormat;
			}
			set
			{
				if ((this._PasswordFormat != value))
				{
					this.OnPasswordFormatChanging(value);
					this.SendPropertyChanging();
					this._PasswordFormat = value;
					this.SendPropertyChanged("PasswordFormat");
					this.OnPasswordFormatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordSalt", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string PasswordSalt
		{
			get
			{
				return this._PasswordSalt;
			}
			set
			{
				if ((this._PasswordSalt != value))
				{
					this.OnPasswordSaltChanging(value);
					this.SendPropertyChanging();
					this._PasswordSalt = value;
					this.SendPropertyChanged("PasswordSalt");
					this.OnPasswordSaltChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MobilePIN", DbType="NVarChar(16)")]
		public string MobilePIN
		{
			get
			{
				return this._MobilePIN;
			}
			set
			{
				if ((this._MobilePIN != value))
				{
					this.OnMobilePINChanging(value);
					this.SendPropertyChanging();
					this._MobilePIN = value;
					this.SendPropertyChanged("MobilePIN");
					this.OnMobilePINChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(256)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoweredEmail", DbType="NVarChar(256)")]
		public string LoweredEmail
		{
			get
			{
				return this._LoweredEmail;
			}
			set
			{
				if ((this._LoweredEmail != value))
				{
					this.OnLoweredEmailChanging(value);
					this.SendPropertyChanging();
					this._LoweredEmail = value;
					this.SendPropertyChanged("LoweredEmail");
					this.OnLoweredEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordQuestion", DbType="NVarChar(256)")]
		public string PasswordQuestion
		{
			get
			{
				return this._PasswordQuestion;
			}
			set
			{
				if ((this._PasswordQuestion != value))
				{
					this.OnPasswordQuestionChanging(value);
					this.SendPropertyChanging();
					this._PasswordQuestion = value;
					this.SendPropertyChanged("PasswordQuestion");
					this.OnPasswordQuestionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordAnswer", DbType="NVarChar(128)")]
		public string PasswordAnswer
		{
			get
			{
				return this._PasswordAnswer;
			}
			set
			{
				if ((this._PasswordAnswer != value))
				{
					this.OnPasswordAnswerChanging(value);
					this.SendPropertyChanging();
					this._PasswordAnswer = value;
					this.SendPropertyChanged("PasswordAnswer");
					this.OnPasswordAnswerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsApproved", DbType="Bit NOT NULL")]
		public bool IsApproved
		{
			get
			{
				return this._IsApproved;
			}
			set
			{
				if ((this._IsApproved != value))
				{
					this.OnIsApprovedChanging(value);
					this.SendPropertyChanging();
					this._IsApproved = value;
					this.SendPropertyChanged("IsApproved");
					this.OnIsApprovedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsLockedOut", DbType="Bit NOT NULL")]
		public bool IsLockedOut
		{
			get
			{
				return this._IsLockedOut;
			}
			set
			{
				if ((this._IsLockedOut != value))
				{
					this.OnIsLockedOutChanging(value);
					this.SendPropertyChanging();
					this._IsLockedOut = value;
					this.SendPropertyChanged("IsLockedOut");
					this.OnIsLockedOutChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastLoginDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastLoginDate
		{
			get
			{
				return this._LastLoginDate;
			}
			set
			{
				if ((this._LastLoginDate != value))
				{
					this.OnLastLoginDateChanging(value);
					this.SendPropertyChanging();
					this._LastLoginDate = value;
					this.SendPropertyChanged("LastLoginDate");
					this.OnLastLoginDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastPasswordChangedDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastPasswordChangedDate
		{
			get
			{
				return this._LastPasswordChangedDate;
			}
			set
			{
				if ((this._LastPasswordChangedDate != value))
				{
					this.OnLastPasswordChangedDateChanging(value);
					this.SendPropertyChanging();
					this._LastPasswordChangedDate = value;
					this.SendPropertyChanged("LastPasswordChangedDate");
					this.OnLastPasswordChangedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastLockoutDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastLockoutDate
		{
			get
			{
				return this._LastLockoutDate;
			}
			set
			{
				if ((this._LastLockoutDate != value))
				{
					this.OnLastLockoutDateChanging(value);
					this.SendPropertyChanging();
					this._LastLockoutDate = value;
					this.SendPropertyChanged("LastLockoutDate");
					this.OnLastLockoutDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FailedPasswordAttemptCount", DbType="Int NOT NULL")]
		public int FailedPasswordAttemptCount
		{
			get
			{
				return this._FailedPasswordAttemptCount;
			}
			set
			{
				if ((this._FailedPasswordAttemptCount != value))
				{
					this.OnFailedPasswordAttemptCountChanging(value);
					this.SendPropertyChanging();
					this._FailedPasswordAttemptCount = value;
					this.SendPropertyChanged("FailedPasswordAttemptCount");
					this.OnFailedPasswordAttemptCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FailedPasswordAttemptWindowStart", DbType="DateTime NOT NULL")]
		public System.DateTime FailedPasswordAttemptWindowStart
		{
			get
			{
				return this._FailedPasswordAttemptWindowStart;
			}
			set
			{
				if ((this._FailedPasswordAttemptWindowStart != value))
				{
					this.OnFailedPasswordAttemptWindowStartChanging(value);
					this.SendPropertyChanging();
					this._FailedPasswordAttemptWindowStart = value;
					this.SendPropertyChanged("FailedPasswordAttemptWindowStart");
					this.OnFailedPasswordAttemptWindowStartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FailedPasswordAnswerAttemptCount", DbType="Int NOT NULL")]
		public int FailedPasswordAnswerAttemptCount
		{
			get
			{
				return this._FailedPasswordAnswerAttemptCount;
			}
			set
			{
				if ((this._FailedPasswordAnswerAttemptCount != value))
				{
					this.OnFailedPasswordAnswerAttemptCountChanging(value);
					this.SendPropertyChanging();
					this._FailedPasswordAnswerAttemptCount = value;
					this.SendPropertyChanged("FailedPasswordAnswerAttemptCount");
					this.OnFailedPasswordAnswerAttemptCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FailedPasswordAnswerAttemptWindowStart", DbType="DateTime NOT NULL")]
		public System.DateTime FailedPasswordAnswerAttemptWindowStart
		{
			get
			{
				return this._FailedPasswordAnswerAttemptWindowStart;
			}
			set
			{
				if ((this._FailedPasswordAnswerAttemptWindowStart != value))
				{
					this.OnFailedPasswordAnswerAttemptWindowStartChanging(value);
					this.SendPropertyChanging();
					this._FailedPasswordAnswerAttemptWindowStart = value;
					this.SendPropertyChanged("FailedPasswordAnswerAttemptWindowStart");
					this.OnFailedPasswordAnswerAttemptWindowStartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_Membership_TeamTable", Storage="_TeamTable", ThisKey="UserId", OtherKey="TeamId", IsUnique=true, IsForeignKey=false)]
		public TeamTable TeamTable
		{
			get
			{
				return this._TeamTable.Entity;
			}
			set
			{
				TeamTable previousValue = this._TeamTable.Entity;
				if (((previousValue != value) 
							|| (this._TeamTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TeamTable.Entity = null;
						previousValue.aspnet_Membership = null;
					}
					this._TeamTable.Entity = value;
					if ((value != null))
					{
						value.aspnet_Membership = this;
					}
					this.SendPropertyChanged("TeamTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Description")]
	public partial class Description : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _DescriptionId;
		
		private string _DescriptionPath;
		
		private string _DescriptionName;
		
		private EntitySet<ApplicationTable> _ApplicationTables;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDescriptionIdChanging(System.Guid value);
    partial void OnDescriptionIdChanged();
    partial void OnDescriptionPathChanging(string value);
    partial void OnDescriptionPathChanged();
    partial void OnDescriptionNameChanging(string value);
    partial void OnDescriptionNameChanged();
    #endregion
		
		public Description()
		{
			this._ApplicationTables = new EntitySet<ApplicationTable>(new Action<ApplicationTable>(this.attach_ApplicationTables), new Action<ApplicationTable>(this.detach_ApplicationTables));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DescriptionId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid DescriptionId
		{
			get
			{
				return this._DescriptionId;
			}
			set
			{
				if ((this._DescriptionId != value))
				{
					this.OnDescriptionIdChanging(value);
					this.SendPropertyChanging();
					this._DescriptionId = value;
					this.SendPropertyChanged("DescriptionId");
					this.OnDescriptionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DescriptionPath", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string DescriptionPath
		{
			get
			{
				return this._DescriptionPath;
			}
			set
			{
				if ((this._DescriptionPath != value))
				{
					this.OnDescriptionPathChanging(value);
					this.SendPropertyChanging();
					this._DescriptionPath = value;
					this.SendPropertyChanged("DescriptionPath");
					this.OnDescriptionPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DescriptionName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string DescriptionName
		{
			get
			{
				return this._DescriptionName;
			}
			set
			{
				if ((this._DescriptionName != value))
				{
					this.OnDescriptionNameChanging(value);
					this.SendPropertyChanging();
					this._DescriptionName = value;
					this.SendPropertyChanged("DescriptionName");
					this.OnDescriptionNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Description_ApplicationTable", Storage="_ApplicationTables", ThisKey="DescriptionId", OtherKey="Description_Id")]
		public EntitySet<ApplicationTable> ApplicationTables
		{
			get
			{
				return this._ApplicationTables;
			}
			set
			{
				this._ApplicationTables.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ApplicationTables(ApplicationTable entity)
		{
			this.SendPropertyChanging();
			entity.Description = this;
		}
		
		private void detach_ApplicationTables(ApplicationTable entity)
		{
			this.SendPropertyChanging();
			entity.Description = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Picture")]
	public partial class Picture : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _PictureId;
		
		private string _PictureName;
		
		private string _PicturePath;
		
		private System.Guid _App_Id;
		
		private EntityRef<ApplicationTable> _ApplicationTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPictureIdChanging(System.Guid value);
    partial void OnPictureIdChanged();
    partial void OnPictureNameChanging(string value);
    partial void OnPictureNameChanged();
    partial void OnPicturePathChanging(string value);
    partial void OnPicturePathChanged();
    partial void OnApp_IdChanging(System.Guid value);
    partial void OnApp_IdChanged();
    #endregion
		
		public Picture()
		{
			this._ApplicationTable = default(EntityRef<ApplicationTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PictureId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid PictureId
		{
			get
			{
				return this._PictureId;
			}
			set
			{
				if ((this._PictureId != value))
				{
					this.OnPictureIdChanging(value);
					this.SendPropertyChanging();
					this._PictureId = value;
					this.SendPropertyChanged("PictureId");
					this.OnPictureIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PictureName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string PictureName
		{
			get
			{
				return this._PictureName;
			}
			set
			{
				if ((this._PictureName != value))
				{
					this.OnPictureNameChanging(value);
					this.SendPropertyChanging();
					this._PictureName = value;
					this.SendPropertyChanged("PictureName");
					this.OnPictureNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PicturePath", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string PicturePath
		{
			get
			{
				return this._PicturePath;
			}
			set
			{
				if ((this._PicturePath != value))
				{
					this.OnPicturePathChanging(value);
					this.SendPropertyChanging();
					this._PicturePath = value;
					this.SendPropertyChanged("PicturePath");
					this.OnPicturePathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_App_Id", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid App_Id
		{
			get
			{
				return this._App_Id;
			}
			set
			{
				if ((this._App_Id != value))
				{
					if (this._ApplicationTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApp_IdChanging(value);
					this.SendPropertyChanging();
					this._App_Id = value;
					this.SendPropertyChanged("App_Id");
					this.OnApp_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ApplicationTable_Picture", Storage="_ApplicationTable", ThisKey="App_Id", OtherKey="App_Id", IsForeignKey=true)]
		public ApplicationTable ApplicationTable
		{
			get
			{
				return this._ApplicationTable.Entity;
			}
			set
			{
				ApplicationTable previousValue = this._ApplicationTable.Entity;
				if (((previousValue != value) 
							|| (this._ApplicationTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ApplicationTable.Entity = null;
						previousValue.Pictures.Remove(this);
					}
					this._ApplicationTable.Entity = value;
					if ((value != null))
					{
						value.Pictures.Add(this);
						this._App_Id = value.App_Id;
					}
					else
					{
						this._App_Id = default(System.Guid);
					}
					this.SendPropertyChanged("ApplicationTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StudentTable")]
	public partial class StudentTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _StudentId;
		
		private string _Name;
		
		private string _LastName;
		
		private string _Email;
		
		private string _Phone;
		
		private string _University;
		
		private string _UniversitySection;
		
		private System.Guid _Team_Id;
		
		private EntityRef<TeamTable> _TeamTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStudentIdChanging(System.Guid value);
    partial void OnStudentIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnUniversityChanging(string value);
    partial void OnUniversityChanged();
    partial void OnUniversitySectionChanging(string value);
    partial void OnUniversitySectionChanged();
    partial void OnTeam_IdChanging(System.Guid value);
    partial void OnTeam_IdChanged();
    #endregion
		
		public StudentTable()
		{
			this._TeamTable = default(EntityRef<TeamTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid StudentId
		{
			get
			{
				return this._StudentId;
			}
			set
			{
				if ((this._StudentId != value))
				{
					this.OnStudentIdChanging(value);
					this.SendPropertyChanging();
					this._StudentId = value;
					this.SendPropertyChanged("StudentId");
					this.OnStudentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_University", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string University
		{
			get
			{
				return this._University;
			}
			set
			{
				if ((this._University != value))
				{
					this.OnUniversityChanging(value);
					this.SendPropertyChanging();
					this._University = value;
					this.SendPropertyChanged("University");
					this.OnUniversityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UniversitySection", DbType="NVarChar(150)")]
		public string UniversitySection
		{
			get
			{
				return this._UniversitySection;
			}
			set
			{
				if ((this._UniversitySection != value))
				{
					this.OnUniversitySectionChanging(value);
					this.SendPropertyChanging();
					this._UniversitySection = value;
					this.SendPropertyChanged("UniversitySection");
					this.OnUniversitySectionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Team_Id", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Team_Id
		{
			get
			{
				return this._Team_Id;
			}
			set
			{
				if ((this._Team_Id != value))
				{
					if (this._TeamTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeam_IdChanging(value);
					this.SendPropertyChanging();
					this._Team_Id = value;
					this.SendPropertyChanged("Team_Id");
					this.OnTeam_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TeamTable_StudentTable", Storage="_TeamTable", ThisKey="Team_Id", OtherKey="TeamId", IsForeignKey=true)]
		public TeamTable TeamTable
		{
			get
			{
				return this._TeamTable.Entity;
			}
			set
			{
				TeamTable previousValue = this._TeamTable.Entity;
				if (((previousValue != value) 
							|| (this._TeamTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TeamTable.Entity = null;
						previousValue.StudentTables.Remove(this);
					}
					this._TeamTable.Entity = value;
					if ((value != null))
					{
						value.StudentTables.Add(this);
						this._Team_Id = value.TeamId;
					}
					else
					{
						this._Team_Id = default(System.Guid);
					}
					this.SendPropertyChanged("TeamTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TeamTable")]
	public partial class TeamTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _TeamId;
		
		private System.Nullable<System.Guid> _App_Id;
		
		private string _UserName;
		
		private EntitySet<StudentTable> _StudentTables;
		
		private EntityRef<ApplicationTable> _ApplicationTable;
		
		private EntityRef<aspnet_Membership> _aspnet_Membership;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTeamIdChanging(System.Guid value);
    partial void OnTeamIdChanged();
    partial void OnApp_IdChanging(System.Nullable<System.Guid> value);
    partial void OnApp_IdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    #endregion
		
		public TeamTable()
		{
			this._StudentTables = new EntitySet<StudentTable>(new Action<StudentTable>(this.attach_StudentTables), new Action<StudentTable>(this.detach_StudentTables));
			this._ApplicationTable = default(EntityRef<ApplicationTable>);
			this._aspnet_Membership = default(EntityRef<aspnet_Membership>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid TeamId
		{
			get
			{
				return this._TeamId;
			}
			set
			{
				if ((this._TeamId != value))
				{
					if (this._aspnet_Membership.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeamIdChanging(value);
					this.SendPropertyChanging();
					this._TeamId = value;
					this.SendPropertyChanged("TeamId");
					this.OnTeamIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_App_Id", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> App_Id
		{
			get
			{
				return this._App_Id;
			}
			set
			{
				if ((this._App_Id != value))
				{
					if (this._ApplicationTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApp_IdChanging(value);
					this.SendPropertyChanging();
					this._App_Id = value;
					this.SendPropertyChanged("App_Id");
					this.OnApp_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TeamTable_StudentTable", Storage="_StudentTables", ThisKey="TeamId", OtherKey="Team_Id")]
		public EntitySet<StudentTable> StudentTables
		{
			get
			{
				return this._StudentTables;
			}
			set
			{
				this._StudentTables.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ApplicationTable_TeamTable", Storage="_ApplicationTable", ThisKey="App_Id", OtherKey="App_Id", IsForeignKey=true)]
		public ApplicationTable ApplicationTable
		{
			get
			{
				return this._ApplicationTable.Entity;
			}
			set
			{
				ApplicationTable previousValue = this._ApplicationTable.Entity;
				if (((previousValue != value) 
							|| (this._ApplicationTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ApplicationTable.Entity = null;
						previousValue.TeamTables.Remove(this);
					}
					this._ApplicationTable.Entity = value;
					if ((value != null))
					{
						value.TeamTables.Add(this);
						this._App_Id = value.App_Id;
					}
					else
					{
						this._App_Id = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("ApplicationTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_Membership_TeamTable", Storage="_aspnet_Membership", ThisKey="TeamId", OtherKey="UserId", IsForeignKey=true)]
		public aspnet_Membership aspnet_Membership
		{
			get
			{
				return this._aspnet_Membership.Entity;
			}
			set
			{
				aspnet_Membership previousValue = this._aspnet_Membership.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_Membership.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_Membership.Entity = null;
						previousValue.TeamTable = null;
					}
					this._aspnet_Membership.Entity = value;
					if ((value != null))
					{
						value.TeamTable = this;
						this._TeamId = value.UserId;
					}
					else
					{
						this._TeamId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_Membership");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_StudentTables(StudentTable entity)
		{
			this.SendPropertyChanging();
			entity.TeamTable = this;
		}
		
		private void detach_StudentTables(StudentTable entity)
		{
			this.SendPropertyChanging();
			entity.TeamTable = null;
		}
	}
}
#pragma warning restore 1591
